name: Build Vote
# template source: https://github.com/dockersamples/.github/blob/main/templates/call-docker-build.yaml

on:
  # we want pull requests so we can build(test) but not push to image registry
  push:
    branches:
      - 'main'
    # only build when important files change
    paths:
      - 'vote/**'
      - '.github/workflows/call-docker-build-vote.yaml'
  pull_request:
    branches:
      - 'main'
    # only build when important files change
    paths:
      - 'vote/**'
      - '.github/workflows/call-docker-build-vote.yaml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.30.0' # default is latest stable v
      id: install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download sysdig-cli-scanner if needed
      run:  |
        curl -sLO https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt
        mkdir -p ${GITHUB_WORKSPACE}/cache/db/
        if [ ! -f ${GITHUB_WORKSPACE}/cache/latest_version.txt ] || [ $(cat ./latest_version.txt) != $(cat ${GITHUB_WORKSPACE}/cache/latest_version.txt) ]; then
          cp ./latest_version.txt ${GITHUB_WORKSPACE}/cache/latest_version.txt
          curl -sL -o ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(cat ${GITHUB_WORKSPACE}/cache/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
          chmod +x ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner
        else
          echo "sysdig-cli-scanner latest version already downloaded"
        fi

    - name: Build, tag, and push vote docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: vote
        IMAGE_TAG: latest
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./vote
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Scan Docker vote image
      continue-on-error: true
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: vote
        IMAGE_TAG: latest
        SECURE_API_TOKEN: ${{ secrets.SECURE_API_TOKEN }}
      run: |
        ${GITHUB_WORKSPACE}/cache/sysdig-cli-scanner --console-log --apiurl https://app.us4.sysdig.com $REGISTRY/$REPOSITORY:$IMAGE_TAG
        
